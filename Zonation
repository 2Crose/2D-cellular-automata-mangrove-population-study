import pygame
import random
from collections import Counter

pygame.init()

GREY = (128,128,128)
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
WATER = (0, 0, 225)
YELLOW = (255, 255, 0)
BROWN = (150, 75, 0)

WIDTH, HEIGHT = 800, 800
TILE_SIZE = 10
GRID_WIDTH = WIDTH // TILE_SIZE
GRID_HEIGHT = HEIGHT // TILE_SIZE

Max_S_LEVEL = 35

FPS = 60
screen = pygame.display.set_mode((WIDTH, HEIGHT))

clock = pygame.time.Clock()

all_positions = {
    (col, row)
    for col in range(GRID_WIDTH)
    for row in range(GRID_HEIGHT)
}

     
def gen(num):
    return set([(random.randrange(0, GRID_WIDTH), random.randrange(0, GRID_HEIGHT)) for _ in range(num)])

def draw_grid(RED_positions, BLACK_positions, WHITE_positions, YELLOW_positions, BROWN_positions):
    for BROWN_position in BROWN_positions:
        col, row = BROWN_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, BROWN, (*top_left, TILE_SIZE, TILE_SIZE))
    for RED_position in RED_positions:
        col, row = RED_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, RED, (*top_left, TILE_SIZE, TILE_SIZE))
    for BLACK_position in BLACK_positions:
        col, row = BLACK_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, BLACK, (*top_left, TILE_SIZE, TILE_SIZE))
    for WHITE_position in WHITE_positions:
        col, row = WHITE_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, WHITE, (*top_left, TILE_SIZE, TILE_SIZE))
    for YELLOW_position in YELLOW_positions:
        col, row = YELLOW_position
        top_left = (col * TILE_SIZE, row * TILE_SIZE)
        pygame.draw.rect(screen, YELLOW, (*top_left, TILE_SIZE, TILE_SIZE))
    for row in range(GRID_HEIGHT):
        pygame.draw.line(screen, GREY, (0, row * TILE_SIZE), (WIDTH, row * TILE_SIZE))

    for col in range(GRID_WIDTH):
        pygame.draw.line(screen, GREY, (col * TILE_SIZE, 0), (col * TILE_SIZE, HEIGHT))

def adjust_grid(RED_positions, BLACK_positions, WHITE_positions, YELLOW_positions, BROWN_positions):

    new_YELLOW_positions = set()
    new_YELLOW_positions_todiscard = set()
    new_YELLOW_positions_toadd = set()
    new_WHITE_positions = set()
    new_WHITE_positions_todiscard = set()
    new_WHITE_positions_toadd = set()
    new_BLACK_positions = set()
    new_BLACK_positions_todiscard = set()
    new_BLACK_positions_toadd = set()
    new_RED_positions = set()
    new_RED_positions_todiscard = set()
    new_RED_positions_toadd = set()
    new_BROWN_positions = set()
    new_BROWN_positions_todiscard = set()
    new_BROWN_positions_toadd = set()

    for BROWN_position in BROWN_positions:
        new_BROWN_positions.add(BROWN_position)
        
    for RED_position in RED_positions:
        new_RED_positions.add(RED_position)

    for BLACK_position in BLACK_positions:
        new_BLACK_positions.add(BLACK_position)
        
    for WHITE_position in WHITE_positions:
        new_WHITE_positions.add(WHITE_position)

    for YELLOW_position in YELLOW_positions:
        new_YELLOW_positions.add(YELLOW_position)

#----- RED

    for RED_position in new_RED_positions:
        RED_salinity = get_cell_salinity(RED_position)

        if not (20 <= RED_salinity < 34):
            new_RED_positions_todiscard.add(RED_position)
            new_BROWN_positions.add(RED_position)
                        
    for RED_position in new_RED_positions_todiscard:
        new_RED_positions.discard(RED_position)
        
    for RED_position in new_RED_positions:
        RED_neighbors = get_neighbors(RED_position)
        RED_neighbors = list(filter(lambda x: x in new_RED_positions, RED_neighbors))
        if len(RED_neighbors) in [1,2,3]:
            new_RED_positions_toadd.add(RED_position)
            
        else:
            new_RED_positions_todiscard.add(RED_position)
            

    for RED_position in new_RED_positions_toadd:
        new_RED_positions.add(RED_position)
            
    for RED_position in new_RED_positions_todiscard:
        new_RED_positions.discard(RED_position)
    
    for BROWN_position in new_BROWN_positions:
        BROWN_neighbors = get_neighbors(BROWN_position)
        BROWN_neighbors = list(filter(lambda x: x in new_RED_positions, BROWN_neighbors))

        if len(BROWN_neighbors) in [1, 2]:
            new_RED_positions_toadd.add(BROWN_position)
            
            
    for RED_position in new_RED_positions_toadd:
        new_RED_positions.add(RED_position)
        
    for BROWN_position in new_BROWN_positions_todiscard:
        new_BROWN_positions.discard(BROWN_position)
        
    for RED_position in new_RED_positions:
        if random.randint(1, 150) == 1:   
            new_RED_positions_todiscard.add(RED_position)
            new_BROWN_positions.add(RED_position)
            
    for RED_position in new_RED_positions_todiscard:
        new_RED_positions.discard(RED_position)

#----- BLACK
        
    for BLACK_position in new_BLACK_positions:
        BLACK_salinity = get_cell_salinity(BLACK_position)

        if not (10 <= BLACK_salinity < 25):
            new_BLACK_positions_todiscard.add(BLACK_position)
            
    for BLACK_position in new_BLACK_positions_todiscard:
        new_BLACK_positions.discard(BLACK_position)
        
    for BLACK_position in new_BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in new_BLACK_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [1,2,3]:
            new_BLACK_positions.add(BLACK_position)
        else:
            new_BLACK_positions_todiscard.add(BLACK_position)
            
    for BLACK_position in new_BLACK_positions_todiscard:
        new_BLACK_positions.discard(BLACK_position)
    
    for RED_position in new_RED_positions:
        RED_neighbors = get_neighbors(RED_position)
        RED_neighbors = list(filter(lambda x: x in new_BLACK_positions, RED_neighbors))

        if len(RED_neighbors) in [3,4]:
            new_BLACK_positions_toadd.add(RED_position)
            new_RED_positions_todiscard.add(RED_position)
    
    for BROWN_position in new_BROWN_positions:
        BROWN_neighbors = get_neighbors(BROWN_position)
        BROWN_neighbors = list(filter(lambda x: x in new_BLACK_positions, BROWN_neighbors))

        if len(BROWN_neighbors) in [1, 2]:
            new_BLACK_positions_toadd.add(BROWN_position)
    
    for RED_position in new_RED_positions_todiscard:
        new_RED_positions.discard(RED_position)
        
    for BLACK_position in new_BLACK_positions_toadd:
        new_BLACK_positions.add(BLACK_position)

    for BLACK_position in new_BLACK_positions:
        if random.randint(1, 100) == 1:   
            new_BLACK_positions_todiscard.add(BLACK_position)
            
    for BLACK_position in new_BLACK_positions_todiscard:
        new_BLACK_positions.discard(BLACK_position)

#----- WHITE

    for WHITE_position in new_WHITE_positions:
        WHITE_salinity = get_cell_salinity(WHITE_position)

        if not (0 <= WHITE_salinity < 15):
            new_WHITE_positions_todiscard.add(WHITE_position)

    for WHITE_position in new_WHITE_positions_todiscard:
        new_WHITE_positions.discard(WHITE_position)
    
    for WHITE_position in new_WHITE_positions:
        WHITE_neighbors = get_neighbors(WHITE_position)
        WHITE_neighbors = list(filter(lambda x: x in new_WHITE_positions, WHITE_neighbors))
        if len(WHITE_neighbors) in [1,2,3]:
            new_WHITE_positions.add(WHITE_position)
        else:
            new_WHITE_positions_todiscard.add(WHITE_position)

    for WHITE_position in new_WHITE_positions_todiscard:
        new_WHITE_positions.discard(WHITE_position)
    
    for BLACK_position in new_BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in new_WHITE_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [3,4]:
            new_WHITE_positions_toadd.add(BLACK_position)
            new_BLACK_positions_todiscard.add(BLACK_position)
           
    for BROWN_position in new_BROWN_positions:
        BROWN_neighbors = get_neighbors(BROWN_position)
        BROWN_neighbors = list(filter(lambda x: x in new_WHITE_positions, BROWN_neighbors))
        if len(BROWN_neighbors) in [1, 2]:
            new_WHITE_positions_toadd.add(BROWN_position)

    for BLACK_position in new_BLACK_positions_todiscard:
        new_BLACK_positions.discard(BLACK_position)

    for WHITE_position in new_WHITE_positions_toadd:
        new_WHITE_positions.add(WHITE_position)
     
    for WHITE_position in new_WHITE_positions:
        if random.randint(1, 100) == 1:   
            new_WHITE_positions_todiscard.add(WHITE_position)
         
    for WHITE_position in new_WHITE_positions_todiscard:
        new_WHITE_positions.discard(WHITE_position)

#----- YELLOW

    for YELLOW_position in new_YELLOW_positions:
        YELLOW_salinity = get_cell_salinity(YELLOW_position)

        if not (0 <= YELLOW_salinity < 30):
            new_YELLOW_positions_todiscard.add(YELLOW_position)
            
    for YELLOW_position in new_YELLOW_positions_todiscard:
        new_YELLOW_positions.discard(YELLOW_position)
        
    for YELLOW_position in new_YELLOW_positions:
        YELLOW_neighbors = get_neighbors(YELLOW_position)
        YELLOW_neighbors = list(filter(lambda x: x in new_YELLOW_positions, YELLOW_neighbors))

        if len(YELLOW_neighbors) in [1,2]:
            new_YELLOW_positions.add(YELLOW_position)
        else:
            new_YELLOW_positions_todiscard.add(YELLOW_position)

    for YELLOW_position in new_YELLOW_positions_todiscard:
        new_YELLOW_positions.discard(YELLOW_position)
    
    for WHITE_position in new_WHITE_positions:
        WHITE_neighbors = get_neighbors(WHITE_position)
        WHITE_neighbors = list(filter(lambda x: x in new_YELLOW_positions, WHITE_neighbors))
        if len(WHITE_neighbors) in [2, 3, 4]:
            new_YELLOW_positions_toadd.add(WHITE_position)
            new_WHITE_positions_todiscard.add(WHITE_position)

    for BLACK_position in new_BLACK_positions:
        BLACK_neighbors = get_neighbors(BLACK_position)
        BLACK_neighbors = list(filter(lambda x: x in new_YELLOW_positions, BLACK_neighbors))
        if len(BLACK_neighbors) in [2, 3, 4]:
            new_YELLOW_positions_toadd.add(BLACK_position)
            new_BLACK_positions_todiscard.add(BLACK_position)

    for RED_position in new_RED_positions:
        RED_neighbors = get_neighbors(RED_position)
        
        RED_neighbors = list(filter(lambda x: x in new_YELLOW_positions, RED_neighbors))

        if len(RED_neighbors) in [2, 3, 4]:
            new_YELLOW_positions_toadd.add(RED_position)
            new_RED_positions_todiscard.add(RED_position)
    
    for BROWN_position in new_BROWN_positions:
        BROWN_neighbors = get_neighbors(BROWN_position)
        BROWN_neighbors = list(filter(lambda x: x in new_YELLOW_positions, BROWN_neighbors))

        if len(BROWN_neighbors) in [1, 2, 3]:
            new_YELLOW_positions_toadd.add(BROWN_position)

    for YELLOW_position in new_YELLOW_positions_toadd:
        new_YELLOW_positions.add(YELLOW_position)

    for WHITE_position in new_WHITE_positions_todiscard:
        new_WHITE_positions.discard(WHITE_position)

    for BLACK_position in new_BLACK_positions_todiscard:
        new_BLACK_positions.discard(BLACK_position)

    for RED_position in new_RED_positions_todiscard:
        new_RED_positions.discard(RED_position)
        
    for YELLOW_position in new_YELLOW_positions:
        if random.randint(1, 50) == 1:   
            new_YELLOW_positions_todiscard.add(YELLOW_position)

    for YELLOW_position in new_YELLOW_positions_todiscard:
        new_YELLOW_positions.discard(YELLOW_position)
#----
    for color_set in (new_RED_positions, new_BLACK_positions, new_WHITE_positions, new_YELLOW_positions):
        for pos in color_set:
            new_BROWN_positions.discard(pos)
            
    forbidden = set(
        new_RED_positions
        | new_BLACK_positions
        | new_WHITE_positions
        | new_YELLOW_positions
    )
    new_BROWN_positions = all_positions - forbidden
    
    for BROWN_position in new_BROWN_positions:
        BROWN_salinity = get_cell_salinity(BROWN_position)    
        if not (0 <= BROWN_salinity < 34):
            new_BROWN_positions_todiscard.add(BROWN_position)
            
    for BROWN_position in new_BROWN_positions_todiscard:
        new_BROWN_positions.discard(BROWN_position)
            
    return new_RED_positions, new_BLACK_positions, new_WHITE_positions, new_YELLOW_positions, new_BROWN_positions

def get_neighbors(pos):
    x, y = pos
    neighbors = []
    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        nx, ny = x + dx, y + dy
        if abs(dx) + abs(dy) != 1:
          continue
        if 0 <= nx < GRID_WIDTH and 0 <= ny < GRID_HEIGHT:
            neighbors.append((nx, ny))
    return neighbors

def get_cell_salinity(pos):
    col, row = pos
    raw = (row * Max_S_LEVEL) / (GRID_HEIGHT - 1)
    raw = round(raw, 2)
    return max(0, min(Max_S_LEVEL, raw))
"""
grid_values = [
    [get_cell_salinity((col, row))
    for col in range(GRID_WIDTH)]
    for row in range(GRID_HEIGHT)]
print(grid_values)
"""
            
def main():
    running = True
    playing = False
    clock = pygame.time.Clock()
    FPS = 60
    count = 0
    update_freq = 10
    YELLOW_positions = set()
    WHITE_positions = set()
    BLACK_positions = set()
    RED_positions = set()
    BROWN_positions = set()
    timestep = 0
    while running:
        clock.tick(FPS)
        if playing:
            count += 1
        if count >= update_freq:
            count = 0
            timestep += 1
            RED_positions, BLACK_positions, WHITE_positions, YELLOW_positions, BROWN_positions = adjust_grid(RED_positions, BLACK_positions, WHITE_positions, YELLOW_positions, BROWN_positions)
        if playing:
            status = "Playing"
        else:
            status = "Paused"

        caption = (f"{status}  RED = {len(RED_positions)}  BLACK = {len(BLACK_positions)}  WHITE = {len(WHITE_positions)}  YELLOW = {len(YELLOW_positions)}  BROWN = {len(BROWN_positions)} Timestep = {timestep}")

        pygame.display.set_caption(caption)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1
                    x, y = pygame.mouse.get_pos()
                    col = x // TILE_SIZE
                    row = y // TILE_SIZE
                    pos = (col, row)
                
                    if pos in RED_positions:
                        RED_positions.remove(pos)
                    if pos in BLACK_positions:
                        BLACK_positions.remove(pos)
                    if pos in WHITE_positions:
                        WHITE_positions.remove(pos)
                    if pos in YELLOW_positions:
                        YELLOW_positions.remove(pos)
                    else:
                        RED_positions.add(pos)
                if event.button == 3
                    x, y = pygame.mouse.get_pos()
                    col = x // TILE_SIZE
                    row = y // TILE_SIZE
                    pos = (col, row)
                
                    if pos in RED_positions:
                        RED_positions.remove(pos)
                    if pos in BLACK_positions:
                        BLACK_positions.remove(pos)
                    if pos in WHITE_positions:
                        WHITE_positions.remove(pos)
                    if pos in YELLOW_positions:
                        YELLOW_positions.remove(pos)
                    else:
                        BLACK_positions.add(pos)
                if event.button == 2
                    x, y = pygame.mouse.get_pos()
                    col = x // TILE_SIZE
                    row = y // TILE_SIZE
                    pos = (col, row)
                
                    if pos in RED_positions:
                        RED_positions.remove(pos)
                    if pos in BLACK_positions:
                        BLACK_positions.remove(pos)
                    if pos in WHITE_positions:
                        WHITE_positions.remove(pos)
                    if pos in YELLOW_positions:
                        YELLOW_positions.remove(pos)
                    else:
                        WHITE_positions.add(pos)

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    playing = not playing

                if event.key == pygame.K_c:
                    positions = set()
                    playing = False
                    count = 0

                if event.key == pygame.K_g:
                    YELLOW_positions.clear()
                    WHITE_positions.clear()
                    BLACK_positions.clear()
                    RED_positions.clear()
                    BROWN_positions.clear()
                    BROWN_positions = {
                        (col, row)
                        for col in range(GRID_WIDTH)
                        for row in range(GRID_HEIGHT)}
                    timestep = 0

                    RED_positions = gen(random.randrange(4, 10) * GRID_WIDTH)
                    
                    BLACK_positions = gen(random.randrange(4, 10) * GRID_WIDTH)
                    
                    WHITE_positions = gen(random.randrange(4, 10) * GRID_WIDTH)
                    
                    #YELLOW_positions = gen(random.randrange(4, 10) * GRID_WIDTH)

                if event.key == pygame.K_h:
                    half_YELLOW_size = len(YELLOW_positions) // 2
                    YELLOW_positions = set(random.sample(list(YELLOW_positions), half_YELLOW_size))
                    half_BLACK_size = len(BLACK_positions) // 2
                    BLACK_positions = set(random.sample(list(BLACK_positions), half_BLACK_size))
                    half_WHITE_size = len(WHITE_positions) // 2
                    WHITE_positions = set(random.sample(list(WHITE_positions), half_WHITE_size))
                    half_RED_size = len(RED_positions) // 2
                    RED_positions = set(random.sample(list(RED_positions), half_RED_size))
                    half_BROWN_size = len(BROWN_positions) // 2
                    BROWN_positions = set(random.sample(list(BROWN_positions), half_BROWN_size))


                    

        screen.fill(WATER)
        draw_grid(RED_positions, BLACK_positions, WHITE_positions, YELLOW_positions, BROWN_positions)
        pygame.display.update()


    pygame.quit()

if __name__ == "__main__":
    main()
